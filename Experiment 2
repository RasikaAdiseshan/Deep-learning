import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

df=pd.read_csv("Iris.csv")
df
df.isnull().sum()
from sklearn.preprocessing import OneHotEncoder
X=df.drop(["Species","Id"],axis=1)
y=df["Species"]
ohe=OneHotEncoder(sparse_output=False)
y=ohe.fit_transform(y.values.reshape(-1,1))
y_df = pd.DataFrame(y, columns=ohe.categories_[0])
y_df.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"X_train shape: {X_train.shape}, y_train shape: {y_train.shape}")
print(f"X_test shape: {X_test.shape}, y_test shape: {y_test.shape}")
X.head()
model=Sequential()
model.add(Dense(10,activation="sigmoid",input_dim=4))
model.add(Dense(10,activation="sigmoid"))
model.add(Dense(3,activation="softmax"))
model.compile(loss="crossentropy")
model.fit(X_train,y_train,epochs=15,batch_size=5)
score=model.evaluate(X_train,y_train)
score
# prompt: print confusion matrix
import numpy as np
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true_classes = np.argmax(y_test, axis=1)
cm = confusion_matrix(y_true_classes, y_pred_classes)

class_names = ohe.categories_[0]

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()
